\"use client\";\n\nimport { useState, useEffect, FormEvent } from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { createBrowserClient } from \"@/lib/supabase-browser\";\nimport { Lock, Loader, AlertCircle, CheckCircle, ArrowLeft } from \"lucide-react\";\n\nfunction ResetPasswordContent() {\n    const [password, setPassword] = useState<string>(\"\");\n    const [confirmPassword, setConfirmPassword] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [success, setSuccess] = useState<boolean>(false);\n    const [tokenError, setTokenError] = useState<boolean>(false);\n    const router = useRouter();\n    const searchParams = useSearchParams();\n    const supabase = createBrowserClient();\n\n    useEffect(() => {\n        const hasToken =\n            searchParams?.has('token') ||\n            (searchParams?.has('type') && searchParams?.get('type') === 'recovery');\n        if (!hasToken) {\n            setTokenError(true);\n        }\n    }, [searchParams]);\n\n    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setLoading(true);\n        setError(null);\n        setSuccess(false);\n        try {\n            if (!password) {\n                setError(\"O campo de senha é obrigatório\");\n                setLoading(false);\n                return;\n            }\n            if (password.length < 6) {\n                setError(\"A senha deve ter pelo menos 6 caracteres\");\n                setLoading(false);\n                return;\n            }\n            if (password !== confirmPassword) {\n                setError(\"As senhas não coincidem\");\n                setLoading(false);\n                return;\n            }\n            const { error: resetError } = await supabase.auth.updateUser({ password });\n            if (resetError) {\n                throw resetError;\n            }\n            setSuccess(true);\n            setTimeout(() => router.push(\"/login\"), 1500);\n        } catch (err: any) {\n            setError(err.message || \"Erro ao redefinir senha. Tente novamente.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    if (tokenError) {\n        return (\n            <div className=\"flex justify-center items-center min-h-screen\">\n                <div className=\"max-w-md w-full bg-white p-8 rounded-lg shadow-md border border-[#E5E7EB] text-center\">\n                    <AlertCircle className=\"mx-auto mb-4 text-red-500\" size={32} />\n                    <h2 className=\"text-xl font-bold mb-2\">Token inválido ou ausente</h2>\n                    <p className=\"mb-4\">O link de redefinição de senha está inválido ou expirado.</p>\n                    <Link href=\"/forgot-password\" className=\"inline-flex items-center text-[#484DB5] hover:underline\">\n                        <ArrowLeft size={16} className=\"mr-1\" /> Voltar para recuperar senha\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"flex justify-center bg-white py-8 px-4 sm:px-6 lg:px-8\">\n            <div className=\"max-w-md w-full space-y-8 bg-white p-8 rounded-lg shadow-md border border-[#E5E7EB]\">\n                <div className=\"text-center\">\n                    <h1 className=\"text-3xl font-extrabold text-black\">Redefinir Senha</h1>\n                </div>\n                {error && (\n                    <div className=\"flex items-center gap-2 bg-red-50 border border-red-200 text-red-700 p-3 rounded\">\n                        <AlertCircle size={18} />\n                        <span>{error}</span>\n                    </div>\n                )}\n                {success && (\n                    <div className=\"flex items-center gap-2 bg-green-50 border border-green-200 text-green-700 p-3 rounded\">\n                        <CheckCircle size={18} />\n                        <span>Senha redefinida com sucesso!</span>\n                    </div>\n                )}\n                <form className=\"space-y-6\" onSubmit={handleSubmit}>\n                    <div>\n                        <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                            Nova Senha\n                        </label>\n                        <div className=\"mt-1 relative rounded-md shadow-sm\">\n                            <input\n                                id=\"password\"\n                                name=\"password\"\n                                type=\"password\"\n                                autoComplete=\"new-password\"\n                                required\n                                className=\"appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-[#484DB5] focus:border-[#484DB5] sm:text-sm\"\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                                disabled={loading}\n                            />\n                            <Lock className=\"absolute right-3 top-2.5 text-gray-400\" size={18} />\n                        </div>\n                    </div>\n                    <div>\n                        <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n                            Confirmar Senha\n                        </label>\n                        <div className=\"mt-1 relative rounded-md shadow-sm\">\n                            <input\n                                id=\"confirmPassword\"\n                                name=\"confirmPassword\"\n                                type=\"password\"\n                                autoComplete=\"new-password\"\n                                required\n                                className=\"appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-[#484DB5] focus:border-[#484DB5] sm:text-sm\"\n                                value={confirmPassword}\n                                onChange={(e) => setConfirmPassword(e.target.value)}\n                                disabled={loading}\n                            />\n                            <Lock className=\"absolute right-3 top-2.5 text-gray-400\" size={18} />\n                        </div>\n                    </div>\n                    <div>\n                        <button\n                            type=\"submit\"\n                            disabled={loading}\n                            className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#484DB5] hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#484DB5] transition-all duration-300\"\n                        >\n                            {loading ? (\n                                <Loader className=\"animate-spin mr-2\" size={18} />\n                            ) : null}\n                            Redefinir senha\n                        </button>\n                    </div>\n                </form>\n                <div className=\"mt-6 text-center\">\n                    <Link href=\"/login\" className=\"inline-flex items-center text-[#484DB5] hover:underline\">\n                        Voltar para login\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default function ResetPasswordPage() {\n    return <ResetPasswordContent />;\n}\n
